# 문제11688번.Calkin-Wilf tree 1
# 시간: 2초, 메모리: 256MB



# 입력
'''
1. 테스트 케이스 T
2. L 또는 R로만 이루어진 문자열
- 1 <= 문자열 길이 <= 30
- i번째 문자가 ‘L’이면 i번째로 이동할 때 현재 노드에서 왼쪽으로, ‘R’이면 i번째로 이동할 때 현재 노드에서 오른쪽으로 내려갔음을 의미
'''



# 출력
'''
1. #{테스트케이스} {위치한 노드가 나타내는 유리수가 기약분수로 a/b 이면 a와 b를 공백 하나로 구분하여 출력}
- 루트 노드에서부터, 자식을 따라 내려간 방향이 순서대로 주어질 때, 마지막에 위치한 노드가 어떤 유리수를 나타내는지 구하면 됨

<트리(Calkin-Wilf tree) 설명>
1) 트리의 루트는 1/1 을 나타냄
2) 트리의 각 노드는 왼쪽 자식과 오른쪽 자식을 가짐
3) 어떤 노드가 a/b 를 나타내고 있다면, 왼쪽 자식은 a/a+b 를 오른쪽 자식은 a+b/b 를 나타냄
'''



# 코드
import sys

sys.stdin = open('../input_text/11688.txt')

T = int(input())
for test_case in range(1, T + 1):
    directions = input()
    L, R = 1, 1

    for d in directions:
        if d == 'L':
            R += L
        if d == 'R':
            L += R

    print(f'#{test_case} {L} {R}')



# 실행 결과: 성공(메모리:62,456 kb, 시간:1,163 ms)